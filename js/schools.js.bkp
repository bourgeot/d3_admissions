/*
 * This script will show a map of the US with a layer of zip codes for high schools.
 * Clicking on the state will cause a list of high schools that are in that state to appear.
 * By default the list will just be all the high schools in the set sorted by alpha (the first
 * 25 will be shown).
 */
 
//declare some stuff.
var rootContainer = "#visualization",
	dataPath = "../sites/all/modules/d3_admissions/data/",
	lastAvailableTerm = '2134',
	width = 710, 
	height = 400, 
	centered,
	schools = [],
	feeders = [],
	schoolsByState,
	schoolsByZip,
	schoolsByCity,
	schoolsByName,
	schoolCountByState,
	schoolCountByZip,
	schoolCountByCity;

var frosh = [],
	froshByState,
	froshBySchoolID,
	froshByAdmitTerm,
	froshByZip,
	froshByFate,
	froshGradsByState,
	froshGradsBySchoolID;

			//create the supporting dc chart divs
			var rowDiv = d3.select("div#visualization").append("div");
				rowDiv.attr("id", "terms-row-chart");
				rowDiv.append("a").attr("class", "reset").attr("href", 'javascript:termRowChart.filterAll();dc.redrawAll();')
					.attr("style", 'display: none;').html('reset');
			var termRowChart = dc.rowChart("div#terms-row-chart");	

	//set up the tooltip container
var tooltip = d3.select("body").append("div")
	.attr("class", "tooltip")
	.style("opacity", 0);
	
//create the map container
var svg = d3.select("#visualization").append("svg")
	.attr("width", width)
	.attr("height", height);

var g = svg.append("g");
//var gSchools = svg.append("g");
	//gSchools.attr("id", "schools-g");
//set up the data table
var tColumns = ['School', 'City'];
var schoolsTable = d3.select(rootContainer).append("table");
schoolsTable.append("caption").text("Top 25 US Schools for Admits");
var tableHeader = schoolsTable.append("thead");
var tr = tableHeader.append("tr");
tr.selectAll("th").data(tColumns)
	.enter()
	.append("th").text(function(d) {return d;});
var schoolsTBody = schoolsTable.append("tbody");
/*tr.selectAll("td")
	.data(function(d) {return d; })
	.enter().append("td")
	.text(function(d) {return d;});*/
/* 
 * Set up the color scale based on the number of schools in the state. 
 * Eventually this scale will be used for admits by state and grads by state.
 */
var quantize = d3.scale.quantize()
	.domain([0, 1000])
	.range(d3.range(9).map(function(i) {return "q" + i + "-9";}));
	
/*
 * The Map setup
 */
var projection = d3.geo.albersUsa().scale(800).translate([width/2 - 35, height/2]);
var path = d3.geo.path().projection(projection);


//define the map section
d3.json(dataPath + "us-states.json", function(error, topology) {
	//console.log(topojson.feature(topology, topology.objects.states).features);
	g.append("g")
		.attr("id", "states")
		.selectAll("path")
		.data(topojson.feature(topology, topology.objects.states).features)
		.enter()
		.append("path")
		.attr("d", path)
		.attr("id", function(d) {return d.properties.postal;})
		.attr("class", function(d) {return d.properties.name + ' state';})
		.on("click", clicked)
		.on("mouseover", function(d) {
			var sCnt = 0;
			var gCnt = 0;
			var mCnt = 0;
			var aCnt = 0;
			if ( schoolsByState !== undefined) {
				//console.log(d.properties.postal);
				//schoolsByState.filter(d.properties.postal);
				sCnt = schoolsByState.filter(d.properties.postal).top(Infinity).length;					
			}
			if (froshByState !== undefined) {
				froshByFate.filterAll();
				aCnt = froshByState.filter(d.properties.postal).top(Infinity).length;
				gCnt = froshByFate.filter('Graduated').top(Infinity).length;
			}
			tooltip.transition()
				.duration(200)
				.style("opacity", .9);
			tooltip.html(d.properties.name + ': ' + sCnt + ' schools<br/>' + gCnt + ' Grads<br/>' + aCnt + ' Admits<br/>' + d3.round(gCnt*100/aCnt, 2) + '%')
				.style("left", (d3.event.pageX) + "px")
				.style("top", (d3.event.pageY - 28) + "px");
		})
		.on("mouseout", function(d) {
			tooltip.transition()
				.duration(200)
				.style("opacity", 0);
		});
	/*
	 * Load the schools after the states have been displayed.
	 */
	d3.tsv(dataPath + "us-schools.txt", function(error, data) {
		//map the data
		data.forEach(function(d) {
			d.county = d.County_Name;
			d.latitude = +d.Latitude;
			d.longitude = +d.Longitude;
			d.city = d.Place_Name;
			d.zip = d.Zipcode;
			d.state = d.State_Code;
			d.school = d.SchoolName;
			d.schoolID = d.Ext_Org_ID;
			d.feeder = false;
		});
		//draw the schools
		//console.log(data);
		g.selectAll("circle")
			.data(data)
			.enter()
			.append("circle")
			.attr("cx", function(d) {
				var p = projection([d.longitude, d.latitude]);
				if (p !== null) {
					return p[0];
				};
			})
			.attr("cy", function(d) {
				var p = projection([d.longitude, d.latitude]);
				if (p !== null) {
					return p[1];
				};
			})
			.attr("r", 1.5)
			.attr("id", function(d) {return d.schoolID;})
			.style("fill", "firebrick")
			.on("mouseover", function(d) {
				tooltip.transition()
						.duration(200)
						.style("opacity", .9);
				tooltip.html(d.school)
					.style("left", (d3.event.pageX) + "px")
					.style("top", (d3.event.pageY - 28) + "px");
			})
			.on("mouseout", function(d) {
				tooltip.transition()
					.duration(500)
					.style("opacity", 0);
			});
		schools = crossfilter(data);
		//define the dimensions
		schoolsByState = schools.dimension(function(d) { return d.state; });
		schoolsByName = schools.dimension(function(d) {return d.school;});
		schoolsGroupByState = schoolsByState.group();  //default is identity, so this should return d;
		//console.log(schoolsByState.group().top(25)); this is for the chloropleth
		schoolsCountByState = schoolsByState.group().reduceCount();
		//console.log(schoolsCountByState.all());
		//if the state map has been loaded, add a class to each state which quantizes it
		d3.select("#states").selectAll("path").attr("class", 
			function(d) {
				var q = schoolsCountByState.all();
				var ss = '';
				var z;
				for (z = 0; z < q.length; z++) {
					if (q[z].key == d.properties.postal) {
						ss = q[z].value;
					}
				}
					return d.properties.name + ' state ' + quantize(ss);
			});
			//console.log(d.properties.postal); });
		//console.log(schoolsByState.filter("AZ").top(25));
		schoolsByZip = schools.dimension(function(d) { return d.zip;});
		schoolsByCity = schools.dimension(function(d) {return d.city;});
		//load the feeder schools and mark them.
		d3.tsv(dataPath + "ua-feeder-schools.txt", function(error, feeders) {
			var candidates;
			feeders.forEach(function(d) {
				//console.log(d);
				var hit = 0;
				if ( schoolsByName !== undefined && schoolsByState !== undefined) {
				//schoolsByState.filter(d.properties.postal);
					candidates = schoolsByState.filter(d.STATE).top(Infinity);
					candidates.forEach(function(c) {
						if (d.SCHOOL == c.school && d.CITY == c.city) {
							//console.log(c);
							c.feeder = true;
							hit = document.getElementById(c.schoolID);
							hit.setAttribute("class", "feeder");
							hit.setAttribute("style", "fill: green;");
							hit.setAttribute("r", "5.5");

							//console.log(hit);
						}
					});
				}
			});
			//bring them to the front
			g.selectAll("circle").sort(function(a, b) {
				if (a.feeder == true) {
					return 1;
				}
				else {
					return -1;
				}
			});
		});
		//now load the student data.
		d3.tsv(dataPath + "ua-frosh.txt", function(error, kids) {
			//mapping
			kids.forEach(function(d) {
				d.emplid = d.EMPLID;
				d.strm = d.STRM;
				d.gradTerm = d.grad_term;
				d.lastTerm = d.last_enrolled_term;
				d.cumGPA = +d.cum_gpa;
				d.schoolID = d.ext_org_id;
				d.admitType = d.appllevelabor;
				d.admitTerm = d.OIRPSTerm;
				d.state = d.schoolstate;
			});
			
			//console.log(kids);
				frosh = crossfilter(kids);
			//define dimensions
			froshByAdmitTerm = frosh.dimension(function(d) {return d.admitTerm;});
			//byZip = frosh.dimension(function(d) {return d.Zipcode;});
			froshBySchoolID = frosh.dimension(function(d) {return d.schoolID;});
			froshByState = frosh.dimension(function(d) {return d.state;});
			froshByFate = frosh.dimension(function(d) {
				var psTerm = {"Fall 2007": '2074', "Fall 2008": '2084'};
				//var terms = 1;
				if (d.gradTerm != 'NONE') {
					return 'Graduated';
				}
				else if (d.lastTerm == lastAvailableTerm) {
					return 'Returning';
				}
				else {
					//terms = parseInt(d.last_enrolled_term) - parseInt(psTerm[d.OIRPSTerm]);
					return 'Elsewhere';
				}
				//console.log(psTerm[d.OIRPSTerm]);
			});

			//fateByState Reduce function (add, remove, initial)
			var fateByState = froshByState.group().reduce(
				function(p, v) {
					if (fate(v) == 'Graduated') {
						p.totalAdmits++;
						p.totalGrads++;
					}
					if (fate(v) == 'Returning') {
						p.totalAdmits++;
						p.totalReturning++;
					}
					if (fate(v) == 'Elsewhere') {
						p.totalAdmits++;
						p.totalElsewhere++;
					}
					p.gradRate = p.totalGrads/p.totalAdmits;
					p.attritionRate = p.totalElseWhere/p.totalAdmits;
					return p;
				},
				function(p, v) {
					if (fate(v) == 'Graduated') {
						p.totalAdmits--;
						p.totalGrads--;
					}
					if (fate(v) == 'Returning') {
						p.totalAdmits--;
						p.totalReturning--;
					}
					if (fate(v) == 'Elsewhere') {
						p.totalAdmits--;
						p.totalElsewhere--;
					}
					p.gradRate = p.totalGrads/p.totalAdmits;
					p.attritionRate = p.totalElseWhere/p.totalAdmits;
					return p;
				},
				function(p, v) {
					return {
						totalAdmits: 0,
						totalGrads: 0,
						totalReturning: 0,
						totalElseWhere: 0,
						gradRate: 0,
						attritionRate: 0
					};
				}
			);

			//render the dc term row chart
			termRowChart.width(350).height(200).margins({ top: 10, right: 10, bottom: 20, left: 40})
				.dimension(froshByAdmitTerm)
				.group(froshByAdmitTerm.group())
				.transitionDuration(500);			
			
			
			var fateDiv = d3.select("#visualization").append("div");
			fateDiv.attr("id", "fate-pie-chart").html('<span>Here is a pie chart</span>');
			fatePieChart = dc.pieChart('#fate-pie-chart');
			fatePieChart.width(200).height(200).radius(80)
				.dimension(froshByAdmitTerm)
				.group(froshByAdmitTerm.group()); 
		dc.renderAll();
		});
		
	});
	
});
	function fate(d) {
		if (d.gradTerm != 'NONE') {
			return 'Graduated';
		}
		else if (d.lastTerm == lastAvailableTerm) {
			return 'Returning';
		}
		else {
			//terms = parseInt(d.last_enrolled_term) - parseInt(psTerm[d.OIRPSTerm]);
			return 'Elsewhere';
		}
	}
	function clicked(d) {
	var x, y, k, it;
	if (d && centered !== d) {
		var centroid = path.centroid(d);
		x = centroid[0];
		y = centroid[1];
		k = 3;
		centered = d;
		//console.log(d.properties.postal);
		//byState.filter(d.properties.postal);
		//dc.redrawAll();
	}
	else {
		x = width/2;
		y = height/2;
		k = 1;
		centered = null;
		//byState.filter();
		//dc.filterAll();
		//dc.redrawAll();
	}
	g.selectAll("path")
		.classed("active", centered && function(d) { return d === centered; });
	
	g.transition()
		.duration(1500)
		.attr("transform", "translate(" + width/2 + "," + height/2 + ")scale(" + k + ") translate(" + -x + "," + -y + ")")
		.style("stroke-width", 1.5 / k + "px");
}